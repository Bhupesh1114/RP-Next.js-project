import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';

// Define a type for the slice state
interface PostsState {
  allPosts : [],
  loading : boolean,
  error : boolean
}

// Define the initial state using that type
const initialState: PostsState = {
  allPosts : [],
  loading : false,
  error : false
}

export const getPosts = createAsyncThunk("getPosts", async () => {
    return fetch("http://localhost:3330/posts").then(res => {
        return res.json();
    });
});

// Use this for client side data fetching without SSR

export const postsSlice = createSlice({
  name: 'posts',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
   // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slic
  extraReducers : (builder) => {
    builder
    .addCase( getPosts.pending , (state) => {
        state.loading = true;
        state.error = false;
       })
    .addCase(getPosts.fulfilled, (state, action) => {
        state.loading = false;
        state.allPosts = action.payload;
        state.error = false;
    })
    .addCase(getPosts.rejected, (state) => {
        state.loading = false;
        state.error = true;
        state.allPosts = [];
    })
  }
})

// export const {} = postsSlice.actions


export default postsSlice.reducer