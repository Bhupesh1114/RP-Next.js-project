import Head from 'next/head'
import { useEffect, useState } from 'react';
import Posts from '../components/Posts/Posts';
import { useAppSelector, useAppDispatch } from '../hooks'
// import {getPosts} from "../slices/postsSlice";
import Image from "next/legacy/image";
import loadingImage from "public/loading.gif";
import {postPropsTypes} from "../components/Posts/Posts";
import {getAllPosts} from "../slices/postsSliceWithSsr";
import { wrapper } from '../store';
import Counter from "../components/counter/Counter";


// type propsTypes = {
// allPosts : postPropsTypes[],
// loading : boolean,
// error : boolean
// }

export default function Home() {
  const [stopFilckering,setStopFlikering] = useState(true)
  const {allPosts, loading, error} = useAppSelector(state => state.postsWithSsr)
  // const dispatch = useAppDispatch()


  useEffect(() => {
   setStopFlikering(false)
  }, [])


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`allposts_container ${stopFilckering && "hide"}`}>
      {loading ? <div className='loading_img'><Image src={loadingImage} priority width="100" height="100"/> </div>: <>
       {allPosts?.map((post:postPropsTypes) => {
          return <Posts key={post.id} {...post}/>
         })}
         {error && <h1>Server Error</h1>}
      </>}
     
      </div>
      {/* <Counter /> */}
    </>
  )
}



export const getServerSideProps = wrapper.getServerSideProps( (store) => async () => {
  store.dispatch(getAllPosts());
 return {
  props : {
    data : ""
  }
 }
})


